#!/usr/bin/env python

Import("env")
Import("env_modules")

env_module = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []
thirdparty_dir = "thirdparty/jsonnet/"
thirdparty_sources = [
    "core/desugarer.cpp",
    "core/formatter.cpp",
    "core/lexer.cpp",
    "core/libjsonnet.cpp",
    "core/parser.cpp",
    "core/pass.cpp",
    "core/path_utils.cpp",
    "core/static_analysis.cpp",
    "core/string_utils.cpp",
    "core/vm.cpp",
    "cpp/libjsonnet++.cpp",
    "third_party/md5/md5.cpp",
    "third_party/rapidyaml/rapidyaml.cpp",
]
thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

env_module.Append(
    CPPPATH=[
        thirdparty_dir + p
        for p in [
            "core",
            "include",
            "stdlib",
            "third_party/json",
            "third_party/md5",
            "third_party/rapidyaml",
        ]
    ]
)

env_thirdparty = env_module.Clone()
env_thirdparty.Append(CPPDEFINES=["_USE_MATH_DEFINES"])
env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
env.modules_sources += thirdparty_obj

# Godot source files

module_obj = []

env_module.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
